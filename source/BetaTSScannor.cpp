/** BetaTSScannor.cpp generated by R. Yokoyama 09/06/2018 **/
#include "BetaTSScannor.hpp"

const std::string BetaTSScannor::kMsgPrefix("[BetaTSScannor]:");

void BetaTSScannor::SetReader()
{
    TSScannorBase<PspmtData>::SetReader();
    std::string br_name = yaml_reader_->GetString("PixieBranchName");
    tree_data_ = new TTreeReaderValue<PspmtData>(*tree_reader_,br_name.c_str());
    std::cout << kMsgPrefix << "TTreeReaderValue: " << br_name << " created." << std::endl;

    high_gain_min_ = yaml_reader_->GetDouble("MinHighGainDynEnergy");
    high_gain_max_ = yaml_reader_->GetDouble("MaxHighGainDynEnergy");
    std::cout << kMsgPrefix << "Beta range on dynode high gain: " << high_gain_min_ << " - " << high_gain_max_ << std::endl;
    low_gain_min_ = yaml_reader_->GetDouble("MinLowGainDynEnergy");
    low_gain_max_ = yaml_reader_->GetDouble("MaxLowGainDynEnergy");
    std::cout << kMsgPrefix << "Beta range on dynode low gain: " << low_gain_min_ << " - " << low_gain_max_ << std::endl;
    return;
}

Bool_t BetaTSScannor::IsInGate()
{
    {   /** checks if this is an implant event **/
        /** if so, record the timestamp and returns false **/
        auto pspmt_low = tree_data_->Get()->low_gain_;
        if(pspmt_low.trace_energy_>1300){
            prev_implant_ = tree_data_->Get()->external_ts_low_;
            return false;
        }
    }

    {
        auto pspmt_high = tree_data_->Get()->high_gain_;
        if(pspmt_high.trace_energy_<1400 || pspmt_high.trace_energy_>4050 )
            return false;
        if(pspmt_high.valid_==0 )
            return false;
    }
/*************
    {
        auto pspmt_ts_high = tree_data_->Get()->external_ts_high_;
        if(pspmt_ts_high-prev_implant_ < 10E+6 && pspmt_ts_high-prev_implant_>0)   // Rejecting the ringing that foloows the beta events.
            return false;
    }
**************/
    return true;
}

