/** TreeMerger.cpp generated by R. Yokoyama 09/07/2018 **/
#include "TreeMerger.hpp"

const std::string TreeMerger::kMsgPrefix("[TreeMerger]:");

TreeMerger::TreeMerger(TSScannorBase* input1, TSScannorBase* input2)
{
    tree_file_ = nullptr;
    yaml_reader_ = nullptr;
    yaml_reader_ = nullptr;
}

TreeMerger::~TreeMerger()
{
    tree_file_->Close();
    if(tree_file_)
        delete tree_file_;
    if(yaml_reader_)
        delete yaml_reader_;
}

void TreeMerger::Configure(const std::string &yaml_node_name)
{
    /** loads configuration from yaml **/
    if(yaml_reader_)
        delete yaml_reader_;
    yaml_reader_ = new YamlReader(yaml_node_name);

    /** opens output root file **/
    std::string output_file_name = yaml_reader_->GetString("OutputFileName");
    std::string file_option = yaml_reader_->GetString("FileOption",false,"RECREATE");
    tree_file_ = new TFile(input_file_name.c_str(),file_option.c_str());
    std::cout << kMsgPrefix << "output file open \"" << output_file_name << "\"" << std::endl;

    /** output tree **/
    std::string tree_name = yaml_reader_->GetString("TreeName");
    tree_file_ = new TTree(tree_name.c_str(),tree_name.c_str());
    std::cout << kMsgPrefix << "output TTree \"" << tree_name << "\" created." << std::endl;
    /** output branch **/
    std::string branch_name = yaml_reader_->GetString("BranchName");
    std::string class_name = yaml_reader_->GetString("ClassName");
    std::string buffsize = yaml_reader_->GetULong64("BuffSize",false,32000);
    std::string splitlevel = yaml_reader_->GetULong64("SplitLevel",false,99);
    tree_file_->Branch(branch_name.c_str(),class_name.c_str(),&p_object_,buffsize,splitlevel);

    /** time window **/
    time_window_low_ = yaml_reader_->GetDouble("TimeWindowLow");
    time_window_up_ = yaml_reader_->GetDouble("TimeWindowUp");

    /** frequency of printing scan progress default = 10000 **/
    print_freq_ = yaml_reader_->GetULong64("PrintFrequency",false,10000);
    return;
}

void TreeMerger::Merge()
{
    decltype(input_scannor_1_->GetMap()) map1 = input_scannor_1_->GetMap();
    decltype(input_scannor_2_->GetMap()) map2 = input_scannor_2_->GetMap();

    ULong64_t total_entry = map1.size();
    RemainTime remain_time(total_entry);

    for ( auto entry : map1 )
    {
        decltype(map2)::iterator it = map2.lower_bound(entry.first - time_window_up_);
        decltype(map2)::iterator last = map2.upper_bound(entry.first + time_window_low_);
        p_object = input_scannor_1_->GetEntry<T>(entry.second);
        while ( it != last )
        {
           p_object.output_vec_.emplace(input_scannor_2_->GetEntry<U>);
           ++it; 
        }
        /** displays progress **/
        ULong64_t i_entry = tree_reader_->GetCurrentEntry() - first_entry_;
        if ( !(tree_reader_->GetCurrentEntry()%print_freq_) && i_entry){
            tm *remain = remain_time.remain(i_entry);
            std::cout << kMsgPrefix << tree_reader_->GetCurrentEntry() << "/" << last_entry_ << " ";
            std::cout << 100.*(double)i_entry/(double)(total_entry) << "\% scanned. Remaining " << remain->tm_hour << "h ";
            std::cout << remain->tm_min << "m " << remain->tm_sec << "s" << std::endl;
        }
    }
    return;
}

